/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VideoRecorder.java
 *
 * Created on 2009-10-12, 16:01:57
 */
package webcamstudio.components;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
import webcamstudio.exporter.VideoExporterFME;
import webcamstudio.sources.VideoSource;

/**
 *
 * @author pballeux
 */
public class FMEBroadcaster extends javax.swing.JDialog implements Runnable {

    private java.io.File file = new java.io.File("fme.xml");
    private long timeStamp = 0;
    private boolean stopMe = false;
    private Mixer mixer = null;
    private VideoExporterFME export = null;

    /** Creates new form VideoRecorder */
    public FMEBroadcaster(Mixer m, java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        mixer = m;
        initComponents();
        txtSelectedFileName.setText(file.getAbsolutePath());
        loadPrefs();
        new Thread(this).start();
    }

    private void loadPrefs() {
        java.util.prefs.Preferences prefs = java.util.prefs.Preferences.userNodeForPackage(this.getClass());
        txtSelectedFileName.setText(prefs.get("fmexml", ""));
        if (txtSelectedFileName.getText().length() > 0) {
            export = new VideoExporterFME((Integer) spinPort.getValue());
            sliderVideoBitrate.setValue(export.getVideoBitrate());
            try {
                export.loadFMEXML(new File(txtSelectedFileName.getText()));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(FMEBroadcaster.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParserConfigurationException ex) {
                Logger.getLogger(FMEBroadcaster.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SAXException ex) {
                Logger.getLogger(FMEBroadcaster.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FMEBroadcaster.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        spinPort.setValue(prefs.getInt("fmegstport", 4888));
        prefs = null;
    }

    private void savePrefs() {
        java.util.prefs.Preferences prefs = java.util.prefs.Preferences.userNodeForPackage(this.getClass());
        prefs.put("fmexml", txtSelectedFileName.getText());
        prefs.putInt("fmegstport", (Integer) spinPort.getValue());
        prefs = null;

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSelectedFileName = new javax.swing.JTextField();
        btnBrowseFile = new javax.swing.JButton();
        lblRecordingTime = new javax.swing.JLabel();
        tglButtonRecord = new javax.swing.JToggleButton();
        btnClose = new javax.swing.JButton();
        lblActualRecordingTime = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblPort = new javax.swing.JLabel();
        spinPort = new javax.swing.JSpinner();
        lblVideoBitrate = new javax.swing.JLabel();
        sliderVideoBitrate = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("webcamstudio/Languages"); // NOI18N
        setTitle(bundle.getString("FMEBROADCASTER")); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        txtSelectedFileName.setEditable(false);
        txtSelectedFileName.setName("txtSelectedFileName"); // NOI18N

        btnBrowseFile.setText(bundle.getString("BROWSE")); // NOI18N
        btnBrowseFile.setName("btnBrowseFile"); // NOI18N
        btnBrowseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseFileActionPerformed(evt);
            }
        });

        lblRecordingTime.setText(bundle.getString("RECORDING_TIME")); // NOI18N
        lblRecordingTime.setName("lblRecordingTime"); // NOI18N

        tglButtonRecord.setFont(new java.awt.Font("DejaVu Sans", 0, 24));
        tglButtonRecord.setForeground(new java.awt.Color(232, 18, 1));
        tglButtonRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/webcamstudio/resources/tango/media-record.png"))); // NOI18N
        tglButtonRecord.setText(bundle.getString("BROADCAST")); // NOI18N
        tglButtonRecord.setName("tglButtonRecord"); // NOI18N
        tglButtonRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglButtonRecordActionPerformed(evt);
            }
        });

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/webcamstudio/resources/tango/process-stop.png"))); // NOI18N
        btnClose.setText(bundle.getString("CLOSE")); // NOI18N
        btnClose.setName("btnClose"); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        lblActualRecordingTime.setText("0");
        lblActualRecordingTime.setName("lblActualRecordingTime"); // NOI18N

        jLabel1.setText(bundle.getString("FMEXML")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        lblPort.setText(bundle.getString("PORT")); // NOI18N
        lblPort.setName("lblPort"); // NOI18N

        spinPort.setName("spinPort"); // NOI18N
        spinPort.setValue(new Integer(4888));

        lblVideoBitrate.setText(bundle.getString("VIDEO_BITRATE")); // NOI18N
        lblVideoBitrate.setName("lblVideoBitrate"); // NOI18N

        sliderVideoBitrate.setMajorTickSpacing(100);
        sliderVideoBitrate.setMaximum(500);
        sliderVideoBitrate.setMinimum(50);
        sliderVideoBitrate.setMinorTickSpacing(20);
        sliderVideoBitrate.setPaintLabels(true);
        sliderVideoBitrate.setPaintTicks(true);
        sliderVideoBitrate.setName("sliderVideoBitrate"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tglButtonRecord, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(lblPort))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinPort, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSelectedFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBrowseFile))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblRecordingTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblActualRecordingTime, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblVideoBitrate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sliderVideoBitrate, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE))
                    .addComponent(btnClose, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtSelectedFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseFile))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPort)
                    .addComponent(spinPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sliderVideoBitrate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVideoBitrate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRecordingTime, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblActualRecordingTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tglButtonRecord)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseFileActionPerformed
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser(txtSelectedFileName.getText());
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setMultiSelectionEnabled(false);
        chooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("XML", "XML", "xml"));
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            file = chooser.getSelectedFile();
            txtSelectedFileName.setText(file.getAbsolutePath());
            export = new VideoExporterFME((Integer) spinPort.getValue());
            sliderVideoBitrate.setValue(export.getVideoBitrate());
            try {
                export.loadFMEXML(new File(txtSelectedFileName.getText()));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(FMEBroadcaster.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParserConfigurationException ex) {
                Logger.getLogger(FMEBroadcaster.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SAXException ex) {
                Logger.getLogger(FMEBroadcaster.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FMEBroadcaster.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnBrowseFileActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        stopMe = true;
        savePrefs();
        if (tglButtonRecord.isSelected()) {
            tglButtonRecord.doClick();
        }
    }//GEN-LAST:event_formWindowClosing

    private void tglButtonRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglButtonRecordActionPerformed
        if (tglButtonRecord.isSelected()) {
            btnBrowseFile.setEnabled(false);
            txtSelectedFileName.setEnabled(false);
            btnClose.setEnabled(false);
            if (export == null) {
                export = new VideoExporterFME((Integer) spinPort.getValue());
                try {
                    export.loadFMEXML(new File(txtSelectedFileName.getText()));
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(FMEBroadcaster.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParserConfigurationException ex) {
                    Logger.getLogger(FMEBroadcaster.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SAXException ex) {
                    Logger.getLogger(FMEBroadcaster.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(FMEBroadcaster.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            export.setVideoBitrate(sliderVideoBitrate.getValue());
            export.setMixer(mixer);
            export.startExport();
            timeStamp = System.currentTimeMillis();
        } else {
            if (export != null) {
                export.stopExport();
                export.stop();
                //export = null;
            }
            btnBrowseFile.setEnabled(true);
            txtSelectedFileName.setEnabled(true);
            btnClose.setEnabled(true);
            timeStamp = 0;
        }
    }//GEN-LAST:event_tglButtonRecordActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        stopMe = true;
        savePrefs();
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                FMEBroadcaster dialog = new FMEBroadcaster(new Mixer(), new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseFile;
    private javax.swing.JButton btnClose;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblActualRecordingTime;
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblRecordingTime;
    private javax.swing.JLabel lblVideoBitrate;
    private javax.swing.JSlider sliderVideoBitrate;
    private javax.swing.JSpinner spinPort;
    private javax.swing.JToggleButton tglButtonRecord;
    private javax.swing.JTextField txtSelectedFileName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while (!stopMe) {
            try {
                if (timeStamp == 0) {
                    lblActualRecordingTime.setText("");
                } else {
                    int delta = (int) ((System.currentTimeMillis() - timeStamp) / 1000);
                    int h = (delta / 3600);
                    delta -= (h * 3600);
                    int m = delta / 60;
                    delta -= m * 60;
                    int s = delta;
                    String time = "";
                    if (h < 10) {
                        time += "0";
                    }
                    time += h + ":";
                    if (m < 10) {
                        time += "0";
                    }
                    time += m + ":";
                    if (s < 10) {
                        time += "0";
                    }
                    time += s;
                    lblActualRecordingTime.setText(time);
                }


                Thread.sleep(1000);
            } catch (InterruptedException ex) {
            }
        }
    }
}
