/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Broadcaster.java
 *
 * Created on 2009-10-25, 01:39:52
 */
package webcamstudio.components;

import org.gstreamer.Gst;
import webcamstudio.InfoListener;
import webcamstudio.exporter.VideoExporter;
import webcamstudio.exporter.VideoExporterOGG;
import webcamstudio.sources.VideoSource;

/**
 *
 * @author pballeux
 */
public class Broadcaster extends javax.swing.JDialog implements InfoListener {

    private VideoExporter broadcaster = null;
    private HTTPServer httpServer = null;
    private Mixer mixer = null;

    /** Creates new form Broadcaster */
    public Broadcaster(Mixer m, java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        mixer = m;
        initComponents();
        slideAudioBitrate.setPaintLabels(true);
        slideVideoBitrate.setPaintLabels(true);
        loadPrefs();
    }

    private void loadPrefs(){
        java.util.prefs.Preferences prefs = java.util.prefs.Preferences.userNodeForPackage(this.getClass());
        spinPort.setValue(new Integer(prefs.getInt("port", 4888)));
        spinHTTPPort.setValue(new Integer(prefs.getInt("httpport", 8888)));
        txtHTTPPassword.setText(prefs.get("password",""));
        prefs = null;
    }
    private void savePrefs(){
        java.util.prefs.Preferences prefs = java.util.prefs.Preferences.userNodeForPackage(this.getClass());
        prefs.putInt("port",(Integer)spinPort.getValue());
        prefs.putInt("httpport",(Integer)spinHTTPPort.getValue());
        prefs.put("password",txtHTTPPassword.getText());
        prefs = null;

    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpBrodcastFormat = new javax.swing.ButtonGroup();
        spinPort = new javax.swing.JSpinner();
        slideVideoBitrate = new javax.swing.JSlider();
        slideAudioBitrate = new javax.swing.JSlider();
        lblPort = new javax.swing.JLabel();
        lblVideoBitrate = new javax.swing.JLabel();
        lblAudioBitrate = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();
        tglBroadcast = new javax.swing.JToggleButton();
        slideFrameRate = new javax.swing.JSlider();
        lblFrameRate = new javax.swing.JLabel();
        lblHTTPPort = new javax.swing.JLabel();
        spinHTTPPort = new javax.swing.JSpinner();
        lblHTTPPassword = new javax.swing.JLabel();
        txtHTTPPassword = new javax.swing.JTextField();
        lblInfoMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("webcamstudio/Languages"); // NOI18N
        setTitle(bundle.getString("BROADCASTER")); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        spinPort.setName("spinPort"); // NOI18N
        spinPort.setValue(new Integer(4888));

        slideVideoBitrate.setMajorTickSpacing(20);
        slideVideoBitrate.setMaximum(150);
        slideVideoBitrate.setMinimum(20);
        slideVideoBitrate.setMinorTickSpacing(10);
        slideVideoBitrate.setPaintLabels(true);
        slideVideoBitrate.setPaintTicks(true);
        slideVideoBitrate.setSnapToTicks(true);
        slideVideoBitrate.setName("slideVideoBitrate"); // NOI18N

        slideAudioBitrate.setMajorTickSpacing(16);
        slideAudioBitrate.setMaximum(128);
        slideAudioBitrate.setMinimum(64);
        slideAudioBitrate.setMinorTickSpacing(8);
        slideAudioBitrate.setPaintLabels(true);
        slideAudioBitrate.setPaintTicks(true);
        slideAudioBitrate.setSnapToTicks(true);
        slideAudioBitrate.setName("slideAudioBitrate"); // NOI18N

        lblPort.setText(bundle.getString("PORT")); // NOI18N
        lblPort.setName("lblPort"); // NOI18N

        lblVideoBitrate.setText(bundle.getString("VIDEO_BITRATE")); // NOI18N
        lblVideoBitrate.setName("lblVideoBitrate"); // NOI18N

        lblAudioBitrate.setText(bundle.getString("AUDIO_BITRATE")); // NOI18N
        lblAudioBitrate.setName("lblAudioBitrate"); // NOI18N

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/webcamstudio/resources/tango/process-stop.png"))); // NOI18N
        btnClose.setText(bundle.getString("CLOSE")); // NOI18N
        btnClose.setName("btnClose"); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        tglBroadcast.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        tglBroadcast.setForeground(new java.awt.Color(255, 0, 6));
        tglBroadcast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/webcamstudio/resources/tango/media-record.png"))); // NOI18N
        tglBroadcast.setText(bundle.getString("BROADCAST")); // NOI18N
        tglBroadcast.setName("tglBroadcast"); // NOI18N
        tglBroadcast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglBroadcastActionPerformed(evt);
            }
        });

        slideFrameRate.setMajorTickSpacing(1);
        slideFrameRate.setMaximum(15);
        slideFrameRate.setMinimum(1);
        slideFrameRate.setPaintLabels(true);
        slideFrameRate.setPaintTicks(true);
        slideFrameRate.setSnapToTicks(true);
        slideFrameRate.setName("slideFrameRate"); // NOI18N

        lblFrameRate.setText(bundle.getString("FRAMERATE")); // NOI18N
        lblFrameRate.setName("lblFrameRate"); // NOI18N

        lblHTTPPort.setText(bundle.getString("HTTP_PORT")); // NOI18N
        lblHTTPPort.setName("lblHTTPPort"); // NOI18N

        spinHTTPPort.setName("spinHTTPPort"); // NOI18N
        spinHTTPPort.setValue(new Integer(8888));

        lblHTTPPassword.setText(bundle.getString("HTTP_PASSWORD")); // NOI18N
        lblHTTPPassword.setName("lblHTTPPassword"); // NOI18N

        txtHTTPPassword.setName("txtHTTPPassword"); // NOI18N

        lblInfoMessage.setText(" ");
        lblInfoMessage.setName("lblInfoMessage"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblPort, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinPort, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHTTPPort, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHTTPPassword))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtHTTPPassword)
                            .addComponent(spinHTTPPort, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblVideoBitrate, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(slideVideoBitrate, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblAudioBitrate, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(slideAudioBitrate, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblFrameRate, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(slideFrameRate, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE))
                    .addComponent(tglBroadcast, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblInfoMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPort)
                    .addComponent(spinHTTPPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHTTPPort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHTTPPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHTTPPassword))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(slideVideoBitrate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVideoBitrate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(slideAudioBitrate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAudioBitrate, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(slideFrameRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFrameRate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tglBroadcast, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose)
                    .addComponent(lblInfoMessage))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.setVisible(false);
        savePrefs();
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void tglBroadcastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglBroadcastActionPerformed
        if (tglBroadcast.isSelected()) {
            slideAudioBitrate.setEnabled(false);
            slideVideoBitrate.setEnabled(false);
            slideFrameRate.setEnabled(false);
            spinPort.setEnabled(false);
            spinHTTPPort.setEnabled(false);
            txtHTTPPassword.setEnabled(false);

            broadcaster = new VideoExporterOGG((Integer) spinPort.getValue());
            httpServer = new HTTPServer((Integer) spinHTTPPort.getValue(),(Integer) spinPort.getValue());
            httpServer.setPassword(txtHTTPPassword.getText().trim());
            httpServer.setListener(this);
            broadcaster.setMixer(mixer);
            broadcaster.setListener(this);
            broadcaster.setVideoBitrate(slideVideoBitrate.getValue());
            broadcaster.setAudioBitrate(slideAudioBitrate.getValue() * 1000);
            broadcaster.setRate(slideFrameRate.getValue());
            //broadcaster.setWidth(160);
            //broadcaster.setHeight(120);
            broadcaster.startExport();
        } else {
            slideAudioBitrate.setEnabled(true);
            slideVideoBitrate.setEnabled(true);
            slideFrameRate.setEnabled(true);
            spinPort.setEnabled(true);
            spinHTTPPort.setEnabled(true);
            txtHTTPPassword.setEnabled(true);
            httpServer.setListener(null);
            httpServer.stop();
            httpServer=null;
            broadcaster.stopExport();
            broadcaster = null;
        }
    }//GEN-LAST:event_tglBroadcastActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        savePrefs();
        if (tglBroadcast.isSelected()) {
            broadcaster.stopExport();
            broadcaster = null;
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Gst.init();
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Broadcaster dialog = new Broadcaster(new Mixer(), new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.ButtonGroup grpBrodcastFormat;
    private javax.swing.JLabel lblAudioBitrate;
    private javax.swing.JLabel lblFrameRate;
    private javax.swing.JLabel lblHTTPPassword;
    private javax.swing.JLabel lblHTTPPort;
    private javax.swing.JLabel lblInfoMessage;
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblVideoBitrate;
    private javax.swing.JSlider slideAudioBitrate;
    private javax.swing.JSlider slideFrameRate;
    private javax.swing.JSlider slideVideoBitrate;
    private javax.swing.JSpinner spinHTTPPort;
    private javax.swing.JSpinner spinPort;
    private javax.swing.JToggleButton tglBroadcast;
    private javax.swing.JTextField txtHTTPPassword;
    // End of variables declaration//GEN-END:variables

    @Override
    public void info(String info) {
        lblInfoMessage.setText(info);
    }

    @Override
    public void error(String message) {
        lblInfoMessage.setText(message);
    }

    @Override
    public void newTextLine(String line) {
    }
}
