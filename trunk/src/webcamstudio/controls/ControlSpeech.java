/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ControlSpeech.java
 *
 * Created on 2010-01-12, 23:54:57
 */
package webcamstudio.controls;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import webcamstudio.sources.VideoSourceIRC;
import webcamstudio.sources.VideoSourceIRCListener;

/**
 *
 * @author pballeux
 */
public class ControlSpeech extends javax.swing.JPanel implements Controls, VideoSourceIRCListener {

    String label = "Speech";
    VideoSourceIRC source = null;

    /** Creates new form ControlSpeech */
    public ControlSpeech(VideoSourceIRC source) {
        initComponents();
        this.source = source;
        source.addIRCListener(this);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("webcamstudio.Languages");
        label = bundle.getString("SPEECH");
        java.util.prefs.Preferences prefs = java.util.prefs.Preferences.userNodeForPackage(this.getClass());
        txtSpeechCommandLine.setText(prefs.get("speechcommandline", txtSpeechCommandLine.getText()));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtSpeechCommandLine = new javax.swing.JTextField();
        chkEnableTextToSpeech = new javax.swing.JCheckBox();
        chkSpeakFrom = new javax.swing.JCheckBox();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("webcamstudio/Languages"); // NOI18N
        jLabel1.setText(bundle.getString("SPEECHCOMMANDLINE")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        txtSpeechCommandLine.setText("espeak"); // NOI18N
        txtSpeechCommandLine.setName("txtSpeechCommandLine"); // NOI18N
        txtSpeechCommandLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSpeechCommandLineActionPerformed(evt);
            }
        });

        chkEnableTextToSpeech.setText(bundle.getString("SPEECHENABLE")); // NOI18N
        chkEnableTextToSpeech.setName("chkEnableTextToSpeech"); // NOI18N

        chkSpeakFrom.setText(bundle.getString("SPEECHSPEAKNAME")); // NOI18N
        chkSpeakFrom.setName("chkSpeakFrom"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSpeechCommandLine, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(chkEnableTextToSpeech)
                    .addComponent(chkSpeakFrom))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkEnableTextToSpeech)
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSpeechCommandLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkSpeakFrom)
                .addContainerGap(190, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSpeechCommandLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSpeechCommandLineActionPerformed
        java.util.prefs.Preferences prefs = java.util.prefs.Preferences.userNodeForPackage(this.getClass());
        prefs.put("speechcommandline", txtSpeechCommandLine.getText());
        try {
            prefs.flush();
        } catch (BackingStoreException ex) {
            Logger.getLogger(ControlSpeech.class.getName()).log(Level.SEVERE, null, ex);
        }
        prefs = null;
    }//GEN-LAST:event_txtSpeechCommandLineActionPerformed

    @Override
    public String getLabel() {
        return label;
    }

    @Override
    public void newLine(VideoSourceIRC irc, final String from, final String text) {
        if (chkEnableTextToSpeech.isSelected()) {
            new Thread(new Runnable() {

                @Override
                public void run() {
                    try {
                        Process p = Runtime.getRuntime().exec(txtSpeechCommandLine.getText());
                        java.io.OutputStream out = p.getOutputStream();
                        String line = text + "\r";
                        if (chkSpeakFrom.isSelected()){
                            line = from.replaceAll(">", "") +": " +line;
                        }
                        out.write(line.getBytes());
                        out.flush();
                        out.close();
                        out=null;
                        try {
                            System.out.println("Speech Command Result: " +p.waitFor());
                        } catch (InterruptedException ex) {
                            Logger.getLogger(ControlSpeech.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        p = null;
                    } catch (IOException ex) {
                        Logger.getLogger(ControlSpeech.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }).start();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkEnableTextToSpeech;
    private javax.swing.JCheckBox chkSpeakFrom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField txtSpeechCommandLine;
    // End of variables declaration//GEN-END:variables

    @Override
    public void removeControl() {
        source.removeIRCListener(this);
        source = null;
    }
}
